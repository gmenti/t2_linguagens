/*
 * generated by Xtext 2.13.0
 */
grammar InternalScheme;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.SchemeGrammarAccess;

}

@parser::members {

 	private SchemeGrammarAccess grammarAccess;

    public InternalSchemeParser(TokenStream input, SchemeGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected SchemeGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getFunctionsFunctionParserRuleCall_0());
			}
			lv_functions_0_0=ruleFunction
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"functions",
					lv_functions_0_0,
					"org.xtext.Scheme.Function");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleFunctionId
entryRuleFunctionId returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionIdRule()); }
	iv_ruleFunctionId=ruleFunctionId
	{ $current=$iv_ruleFunctionId.current.getText(); }
	EOF;

// Rule FunctionId
ruleFunctionId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_MATH_OPERATOR_0=RULE_MATH_OPERATOR
		{
			$current.merge(this_MATH_OPERATOR_0);
		}
		{
			newLeafNode(this_MATH_OPERATOR_0, grammarAccess.getFunctionIdAccess().getMATH_OPERATORTerminalRuleCall_0());
		}
		    |
		this_SCHEME_ID_1=RULE_SCHEME_ID
		{
			$current.merge(this_SCHEME_ID_1);
		}
		{
			newLeafNode(this_SCHEME_ID_1, grammarAccess.getFunctionIdAccess().getSCHEME_IDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleFunctionParam
entryRuleFunctionParam returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionParamRule()); }
	iv_ruleFunctionParam=ruleFunctionParam
	{ $current=$iv_ruleFunctionParam.current.getText(); }
	EOF;

// Rule FunctionParam
ruleFunctionParam returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getFunctionParamAccess().getINTTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getFunctionParamAccess().getIDTerminalRuleCall_1());
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionParamAccess().getBooleanParserRuleCall_2());
		}
		this_Boolean_2=ruleBoolean
		{
			$current.merge(this_Boolean_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionAccess().getIdFunctionIdParserRuleCall_1_0_0_0());
						}
						lv_id_1_0=ruleFunctionId
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionRule());
							}
							set(
								$current,
								"id",
								lv_id_1_0,
								"org.xtext.Scheme.FunctionId");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionAccess().getParamsFunctionParamParserRuleCall_1_0_1_0());
						}
						lv_params_2_0=ruleFunctionParam
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionRule());
							}
							add(
								$current,
								"params",
								lv_params_2_0,
								"org.xtext.Scheme.FunctionParam");
							afterParserOrEnumRuleCall();
						}
					)
				)*
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionAccess().getBlBooleanOperationParserRuleCall_1_1_0());
					}
					lv_bl_3_0=ruleBooleanOperation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionRule());
						}
						set(
							$current,
							"bl",
							lv_bl_3_0,
							"org.xtext.Scheme.BooleanOperation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleBooleanOperation
entryRuleBooleanOperation returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBooleanOperationRule()); }
	iv_ruleBooleanOperation=ruleBooleanOperation
	{ $current=$iv_ruleBooleanOperation.current.getText(); }
	EOF;

// Rule BooleanOperation
ruleBooleanOperation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBooleanOperationAccess().getBoolOperatorParserRuleCall_0());
			}
			this_BoolOperator_0=ruleBoolOperator
			{
				$current.merge(this_BoolOperator_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			(
				kw='not'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getBooleanOperationAccess().getNotKeyword_1_0());
				}
			)?
			{
				newCompositeNode(grammarAccess.getBooleanOperationAccess().getBooleanParserRuleCall_1_1());
			}
			this_Boolean_2=ruleBoolean
			{
				$current.merge(this_Boolean_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)+
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getBooleanOperationAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getBooleanOperationAccess().getBooleanOperationParserRuleCall_2_1());
			}
			this_BooleanOperation_4=ruleBooleanOperation
			{
				$current.merge(this_BooleanOperation_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getBooleanOperationAccess().getRightParenthesisKeyword_2_2());
			}
		)*
	)
;

// Entry rule entryRuleBoolean
entryRuleBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBooleanRule()); }
	iv_ruleBoolean=ruleBoolean
	{ $current=$iv_ruleBoolean.current.getText(); }
	EOF;

// Rule Boolean
ruleBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='#t'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBooleanAccess().getTKeyword_0());
		}
		    |
		kw='#f'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBooleanAccess().getFKeyword_1());
		}
	)
;

// Entry rule entryRuleBoolOperator
entryRuleBoolOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBoolOperatorRule()); }
	iv_ruleBoolOperator=ruleBoolOperator
	{ $current=$iv_ruleBoolOperator.current.getText(); }
	EOF;

// Rule BoolOperator
ruleBoolOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='and'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolOperatorAccess().getAndKeyword_0());
		}
		    |
		kw='or'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolOperatorAccess().getOrKeyword_1());
		}
	)
;

RULE_SCHEME_ID : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'-')*;

RULE_MATH_OPERATOR : ('+'|'-'|'*'|'/');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
