/*
 * generated by Xtext 2.12.0
 */
grammar InternalScheme;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.services.SchemeGrammarAccess;

}
@parser::members {
	private SchemeGrammarAccess grammarAccess;

	public void setGrammarAccess(SchemeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getFunctionsAssignment()); }
		(rule__Model__FunctionsAssignment)*
		{ after(grammarAccess.getModelAccess().getFunctionsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolean
entryRuleBoolean
:
{ before(grammarAccess.getBooleanRule()); }
	 ruleBoolean
{ after(grammarAccess.getBooleanRule()); } 
	 EOF 
;

// Rule Boolean
ruleBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanAccess().getAlternatives()); }
		(rule__Boolean__Alternatives)
		{ after(grammarAccess.getBooleanAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMath
entryRuleMath
:
{ before(grammarAccess.getMathRule()); }
	 ruleMath
{ after(grammarAccess.getMathRule()); } 
	 EOF 
;

// Rule Math
ruleMath 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMathAccess().getAlternatives()); }
		(rule__Math__Alternatives)
		{ after(grammarAccess.getMathAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getGroup()); }
		(rule__Variable__Group__0)
		{ after(grammarAccess.getVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAccess().getTKeyword_0()); }
		'#t'
		{ after(grammarAccess.getBooleanAccess().getTKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanAccess().getFKeyword_1()); }
		'#f'
		{ after(grammarAccess.getBooleanAccess().getFKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanAccess().getDigitZeroKeyword_2()); }
		'0'
		{ after(grammarAccess.getBooleanAccess().getDigitZeroKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanAccess().getDigitOneKeyword_3()); }
		'1'
		{ after(grammarAccess.getBooleanAccess().getDigitOneKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Math__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathAccess().getPlusSignKeyword_0()); }
		'+'
		{ after(grammarAccess.getMathAccess().getPlusSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getMathAccess().getHyphenMinusKeyword_1()); }
		'-'
		{ after(grammarAccess.getMathAccess().getHyphenMinusKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getMathAccess().getAsteriskKeyword_2()); }
		'*'
		{ after(grammarAccess.getMathAccess().getAsteriskKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getMathAccess().getSolidusKeyword_3()); }
		'/'
		{ after(grammarAccess.getMathAccess().getSolidusKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getMathAccess().getEqualsSignKeyword_4()); }
		'='
		{ after(grammarAccess.getMathAccess().getEqualsSignKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getVariableAccess().getINTTerminalRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getIDTerminalRuleCall_1_1()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getIDTerminalRuleCall_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getBooleanParserRuleCall_1_2()); }
		ruleBoolean
		{ after(grammarAccess.getVariableAccess().getBooleanParserRuleCall_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getMathParserRuleCall_1_3()); }
		ruleMath
		{ after(grammarAccess.getVariableAccess().getMathParserRuleCall_1_3()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getSCHEME_IDTerminalRuleCall_1_4()); }
		RULE_SCHEME_ID
		{ after(grammarAccess.getVariableAccess().getSCHEME_IDTerminalRuleCall_1_4()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getFunctionParserRuleCall_1_5()); }
		ruleFunction
		{ after(grammarAccess.getVariableAccess().getFunctionParserRuleCall_1_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getNotKeyword_0()); }
	('not')?
	{ after(grammarAccess.getVariableAccess().getNotKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getAlternatives_1()); }
	(rule__Variable__Alternatives_1)
	{ after(grammarAccess.getVariableAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getApostropheKeyword_0()); }
	('\'')?
	{ after(grammarAccess.getFunctionAccess().getApostropheKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getSCHEME_IDTerminalRuleCall_2()); }
	RULE_SCHEME_ID
	{ after(grammarAccess.getFunctionAccess().getSCHEME_IDTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getVariableParserRuleCall_3()); }
	(ruleVariable)*
	{ after(grammarAccess.getFunctionAccess().getVariableParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__FunctionsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getFunctionsFunctionParserRuleCall_0()); }
		ruleFunction
		{ after(grammarAccess.getModelAccess().getFunctionsFunctionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_SCHEME_ID : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'-'|'/')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
