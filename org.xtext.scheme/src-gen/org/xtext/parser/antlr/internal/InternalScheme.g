/*
 * generated by Xtext 2.12.0
 */
grammar InternalScheme;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.SchemeGrammarAccess;

}

@parser::members {

 	private SchemeGrammarAccess grammarAccess;

    public InternalSchemeParser(TokenStream input, SchemeGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected SchemeGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getFunctionsFunctionParserRuleCall_0());
			}
			lv_functions_0_0=ruleFunction
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"functions",
					lv_functions_0_0,
					"org.xtext.Scheme.Function");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleAnyParam
entryRuleAnyParam returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAnyParamRule()); }
	iv_ruleAnyParam=ruleAnyParam
	{ $current=$iv_ruleAnyParam.current.getText(); }
	EOF;

// Rule AnyParam
ruleAnyParam returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getAnyParamAccess().getINTTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getAnyParamAccess().getIDTerminalRuleCall_1());
		}
		    |
		{
			newCompositeNode(grammarAccess.getAnyParamAccess().getBooleanParserRuleCall_2());
		}
		this_Boolean_2=ruleBoolean
		{
			$current.merge(this_Boolean_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBoolean
entryRuleBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBooleanRule()); }
	iv_ruleBoolean=ruleBoolean
	{ $current=$iv_ruleBoolean.current.getText(); }
	EOF;

// Rule Boolean
ruleBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='not'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getBooleanAccess().getNotKeyword_0());
			}
		)?
		(
			kw='#t'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getBooleanAccess().getTKeyword_1_0());
			}
			    |
			kw='#f'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getBooleanAccess().getFKeyword_1_1());
			}
			    |
			kw='0'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getBooleanAccess().getDigitZeroKeyword_1_2());
			}
			    |
			kw='1'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getBooleanAccess().getDigitOneKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleBoolOperator
entryRuleBoolOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBoolOperatorRule()); }
	iv_ruleBoolOperator=ruleBoolOperator
	{ $current=$iv_ruleBoolOperator.current.getText(); }
	EOF;

// Rule BoolOperator
ruleBoolOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='and'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolOperatorAccess().getAndKeyword_0());
		}
		    |
		kw='or'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolOperatorAccess().getOrKeyword_1());
		}
	)
;

// Entry rule entryRuleMathOperator
entryRuleMathOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMathOperatorRule()); }
	iv_ruleMathOperator=ruleMathOperator
	{ $current=$iv_ruleMathOperator.current.getText(); }
	EOF;

// Rule MathOperator
ruleMathOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMathOperatorAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMathOperatorAccess().getHyphenMinusKeyword_1());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMathOperatorAccess().getAsteriskKeyword_2());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMathOperatorAccess().getSolidusKeyword_3());
		}
	)
;

// Entry rule entryRuleAnyFunction
entryRuleAnyFunction returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAnyFunctionRule()); }
	iv_ruleAnyFunction=ruleAnyFunction
	{ $current=$iv_ruleAnyFunction.current.getText(); }
	EOF;

// Rule AnyFunction
ruleAnyFunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_SCHEME_ID_0=RULE_SCHEME_ID
		{
			$current.merge(this_SCHEME_ID_0);
		}
		{
			newLeafNode(this_SCHEME_ID_0, grammarAccess.getAnyFunctionAccess().getSCHEME_IDTerminalRuleCall_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getAnyFunctionAccess().getAnyParamParserRuleCall_1());
			}
			this_AnyParam_1=ruleAnyParam
			{
				$current.merge(this_AnyParam_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleBooleanFunction
entryRuleBooleanFunction returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBooleanFunctionRule()); }
	iv_ruleBooleanFunction=ruleBooleanFunction
	{ $current=$iv_ruleBooleanFunction.current.getText(); }
	EOF;

// Rule BooleanFunction
ruleBooleanFunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBooleanFunctionAccess().getBoolOperatorParserRuleCall_0());
			}
			this_BoolOperator_0=ruleBoolOperator
			{
				$current.merge(this_BoolOperator_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			{
				newCompositeNode(grammarAccess.getBooleanFunctionAccess().getBooleanParserRuleCall_1());
			}
			this_Boolean_1=ruleBoolean
			{
				$current.merge(this_Boolean_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleMathFuction
entryRuleMathFuction returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMathFuctionRule()); }
	iv_ruleMathFuction=ruleMathFuction
	{ $current=$iv_ruleMathFuction.current.getText(); }
	EOF;

// Rule MathFuction
ruleMathFuction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMathFuctionAccess().getMathOperatorParserRuleCall_0());
			}
			this_MathOperator_0=ruleMathOperator
			{
				$current.merge(this_MathOperator_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getMathFuctionAccess().getINTTerminalRuleCall_1());
			}
		)*
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current.getText(); }
	EOF;

// Rule Function
ruleFunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getFunctionAccess().getBooleanFunctionParserRuleCall_1_0());
			}
			this_BooleanFunction_1=ruleBooleanFunction
			{
				$current.merge(this_BooleanFunction_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getFunctionAccess().getMathFuctionParserRuleCall_1_1());
			}
			this_MathFuction_2=ruleMathFuction
			{
				$current.merge(this_MathFuction_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getFunctionAccess().getAnyFunctionParserRuleCall_1_2());
			}
			this_AnyFunction_3=ruleAnyFunction
			{
				$current.merge(this_AnyFunction_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		(
			{
				newCompositeNode(grammarAccess.getFunctionAccess().getFunctionParserRuleCall_2());
			}
			this_Function_4=ruleFunction
			{
				$current.merge(this_Function_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3());
		}
	)
;

RULE_SCHEME_ID : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'-')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
