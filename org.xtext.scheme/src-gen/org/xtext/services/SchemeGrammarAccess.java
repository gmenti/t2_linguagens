/*
 * generated by Xtext 2.12.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SchemeGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Scheme.Model");
		private final Assignment cFunctionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_0 = (RuleCall)cFunctionsAssignment.eContents().get(0);
		
		//Model:
		//	functions+=Function*;
		@Override public ParserRule getRule() { return rule; }
		
		//functions+=Function*
		public Assignment getFunctionsAssignment() { return cFunctionsAssignment; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_0() { return cFunctionsFunctionParserRuleCall_0; }
	}
	public class AnyParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Scheme.AnyParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AnyParam:
		//	INT | ID | Boolean;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | ID | Boolean
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//Boolean
		public RuleCall getBooleanParserRuleCall_2() { return cBooleanParserRuleCall_2; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Scheme.Boolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cTKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cFKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cDigitZeroKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cDigitOneKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		
		//Boolean:
		//	'not'? ("#t" | "#f" | "0" | "1");
		@Override public ParserRule getRule() { return rule; }
		
		//'not'? ("#t" | "#f" | "0" | "1")
		public Group getGroup() { return cGroup; }
		
		//'not'?
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//"#t" | "#f" | "0" | "1"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"#t"
		public Keyword getTKeyword_1_0() { return cTKeyword_1_0; }
		
		//"#f"
		public Keyword getFKeyword_1_1() { return cFKeyword_1_1; }
		
		//"0"
		public Keyword getDigitZeroKeyword_1_2() { return cDigitZeroKeyword_1_2; }
		
		//"1"
		public Keyword getDigitOneKeyword_1_3() { return cDigitOneKeyword_1_3; }
	}
	public class BoolOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Scheme.BoolOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BoolOperator:
		//	"and" | "or";
		@Override public ParserRule getRule() { return rule; }
		
		//"and" | "or"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"and"
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//"or"
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
	}
	public class MathOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Scheme.MathOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//MathOperator:
		//	"+" | "-" | "*" | "/";
		@Override public ParserRule getRule() { return rule; }
		
		//"+" | "-" | "*" | "/"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//"/"
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
	}
	public class AnyFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Scheme.AnyFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSCHEME_IDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAnyParamParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//AnyFunction:
		//	SCHEME_ID AnyParam*;
		@Override public ParserRule getRule() { return rule; }
		
		//SCHEME_ID AnyParam*
		public Group getGroup() { return cGroup; }
		
		//SCHEME_ID
		public RuleCall getSCHEME_IDTerminalRuleCall_0() { return cSCHEME_IDTerminalRuleCall_0; }
		
		//AnyParam*
		public RuleCall getAnyParamParserRuleCall_1() { return cAnyParamParserRuleCall_1; }
	}
	public class BooleanFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Scheme.BooleanFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBoolOperatorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBooleanParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//BooleanFunction:
		//	BoolOperator? Boolean*;
		@Override public ParserRule getRule() { return rule; }
		
		//BoolOperator? Boolean*
		public Group getGroup() { return cGroup; }
		
		//BoolOperator?
		public RuleCall getBoolOperatorParserRuleCall_0() { return cBoolOperatorParserRuleCall_0; }
		
		//Boolean*
		public RuleCall getBooleanParserRuleCall_1() { return cBooleanParserRuleCall_1; }
	}
	public class MathFuctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Scheme.MathFuction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMathOperatorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//MathFuction:
		//	MathOperator? INT*;
		@Override public ParserRule getRule() { return rule; }
		
		//MathOperator? INT*
		public Group getGroup() { return cGroup; }
		
		//MathOperator?
		public RuleCall getMathOperatorParserRuleCall_0() { return cMathOperatorParserRuleCall_0; }
		
		//INT*
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Scheme.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cBooleanFunctionParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cMathFuctionParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cAnyFunctionParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cFunctionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Function:
		//	'(' (BooleanFunction | MathFuction | AnyFunction) Function* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (BooleanFunction | MathFuction | AnyFunction) Function* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//BooleanFunction | MathFuction | AnyFunction
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//BooleanFunction
		public RuleCall getBooleanFunctionParserRuleCall_1_0() { return cBooleanFunctionParserRuleCall_1_0; }
		
		//MathFuction
		public RuleCall getMathFuctionParserRuleCall_1_1() { return cMathFuctionParserRuleCall_1_1; }
		
		//AnyFunction
		public RuleCall getAnyFunctionParserRuleCall_1_2() { return cAnyFunctionParserRuleCall_1_2; }
		
		//Function*
		public RuleCall getFunctionParserRuleCall_2() { return cFunctionParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	private final ModelElements pModel;
	private final TerminalRule tSCHEME_ID;
	private final AnyParamElements pAnyParam;
	private final BooleanElements pBoolean;
	private final BoolOperatorElements pBoolOperator;
	private final MathOperatorElements pMathOperator;
	private final AnyFunctionElements pAnyFunction;
	private final BooleanFunctionElements pBooleanFunction;
	private final MathFuctionElements pMathFuction;
	private final FunctionElements pFunction;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SchemeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.tSCHEME_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Scheme.SCHEME_ID");
		this.pAnyParam = new AnyParamElements();
		this.pBoolean = new BooleanElements();
		this.pBoolOperator = new BoolOperatorElements();
		this.pMathOperator = new MathOperatorElements();
		this.pAnyFunction = new AnyFunctionElements();
		this.pBooleanFunction = new BooleanFunctionElements();
		this.pMathFuction = new MathFuctionElements();
		this.pFunction = new FunctionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Scheme".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	functions+=Function*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//terminal SCHEME_ID:
	//	('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '-')*;
	public TerminalRule getSCHEME_IDRule() {
		return tSCHEME_ID;
	}
	
	//AnyParam:
	//	INT | ID | Boolean;
	public AnyParamElements getAnyParamAccess() {
		return pAnyParam;
	}
	
	public ParserRule getAnyParamRule() {
		return getAnyParamAccess().getRule();
	}
	
	//Boolean:
	//	'not'? ("#t" | "#f" | "0" | "1");
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//BoolOperator:
	//	"and" | "or";
	public BoolOperatorElements getBoolOperatorAccess() {
		return pBoolOperator;
	}
	
	public ParserRule getBoolOperatorRule() {
		return getBoolOperatorAccess().getRule();
	}
	
	//MathOperator:
	//	"+" | "-" | "*" | "/";
	public MathOperatorElements getMathOperatorAccess() {
		return pMathOperator;
	}
	
	public ParserRule getMathOperatorRule() {
		return getMathOperatorAccess().getRule();
	}
	
	//AnyFunction:
	//	SCHEME_ID AnyParam*;
	public AnyFunctionElements getAnyFunctionAccess() {
		return pAnyFunction;
	}
	
	public ParserRule getAnyFunctionRule() {
		return getAnyFunctionAccess().getRule();
	}
	
	//BooleanFunction:
	//	BoolOperator? Boolean*;
	public BooleanFunctionElements getBooleanFunctionAccess() {
		return pBooleanFunction;
	}
	
	public ParserRule getBooleanFunctionRule() {
		return getBooleanFunctionAccess().getRule();
	}
	
	//MathFuction:
	//	MathOperator? INT*;
	public MathFuctionElements getMathFuctionAccess() {
		return pMathFuction;
	}
	
	public ParserRule getMathFuctionRule() {
		return getMathFuctionAccess().getRule();
	}
	
	//Function:
	//	'(' (BooleanFunction | MathFuction | AnyFunction) Function* ')';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
