/*
 * generated by Xtext 2.12.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SchemeGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Scheme.Model");
		private final Assignment cFunctionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_0 = (RuleCall)cFunctionsAssignment.eContents().get(0);
		
		//Model:
		//	functions+=Function*;
		@Override public ParserRule getRule() { return rule; }
		
		//functions+=Function*
		public Assignment getFunctionsAssignment() { return cFunctionsAssignment; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_0() { return cFunctionsFunctionParserRuleCall_0; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Scheme.Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDigitZeroKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDigitOneKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Boolean:
		//	"#t" | "#f" | "0" | "1";
		@Override public ParserRule getRule() { return rule; }
		
		//"#t" | "#f" | "0" | "1"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"#t"
		public Keyword getTKeyword_0() { return cTKeyword_0; }
		
		//"#f"
		public Keyword getFKeyword_1() { return cFKeyword_1; }
		
		//"0"
		public Keyword getDigitZeroKeyword_2() { return cDigitZeroKeyword_2; }
		
		//"1"
		public Keyword getDigitOneKeyword_3() { return cDigitOneKeyword_3; }
	}
	public class MathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Scheme.Math");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Math:
		//	"+" | "-" | "*" | "/" | "=";
		@Override public ParserRule getRule() { return rule; }
		
		//"+" | "-" | "*" | "/" | "="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//"/"
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
		
		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Scheme.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cBooleanParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cMathParserRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final RuleCall cSCHEME_IDTerminalRuleCall_1_4 = (RuleCall)cAlternatives_1.eContents().get(4);
		private final RuleCall cFunctionParserRuleCall_1_5 = (RuleCall)cAlternatives_1.eContents().get(5);
		
		//Variable:
		//	"not"? (INT | ID | Boolean | Math | SCHEME_ID | Function);
		@Override public ParserRule getRule() { return rule; }
		
		//"not"? (INT | ID | Boolean | Math | SCHEME_ID | Function)
		public Group getGroup() { return cGroup; }
		
		//"not"?
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//INT | ID | Boolean | Math | SCHEME_ID | Function
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
		
		//Boolean
		public RuleCall getBooleanParserRuleCall_1_2() { return cBooleanParserRuleCall_1_2; }
		
		//Math
		public RuleCall getMathParserRuleCall_1_3() { return cMathParserRuleCall_1_3; }
		
		//SCHEME_ID
		public RuleCall getSCHEME_IDTerminalRuleCall_1_4() { return cSCHEME_IDTerminalRuleCall_1_4; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_1_5() { return cFunctionParserRuleCall_1_5; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Scheme.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSCHEME_IDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cVariableParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Function:
		//	"'"? '(' SCHEME_ID Variable* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//"'"? '(' SCHEME_ID Variable* ')'
		public Group getGroup() { return cGroup; }
		
		//"'"?
		public Keyword getApostropheKeyword_0() { return cApostropheKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//SCHEME_ID
		public RuleCall getSCHEME_IDTerminalRuleCall_2() { return cSCHEME_IDTerminalRuleCall_2; }
		
		//Variable*
		public RuleCall getVariableParserRuleCall_3() { return cVariableParserRuleCall_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	private final ModelElements pModel;
	private final TerminalRule tSCHEME_ID;
	private final BooleanElements pBoolean;
	private final MathElements pMath;
	private final VariableElements pVariable;
	private final FunctionElements pFunction;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SchemeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.tSCHEME_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Scheme.SCHEME_ID");
		this.pBoolean = new BooleanElements();
		this.pMath = new MathElements();
		this.pVariable = new VariableElements();
		this.pFunction = new FunctionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Scheme".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	functions+=Function*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//terminal SCHEME_ID:
	//	('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '-' | '/')*;
	public TerminalRule getSCHEME_IDRule() {
		return tSCHEME_ID;
	}
	
	//Boolean:
	//	"#t" | "#f" | "0" | "1";
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//Math:
	//	"+" | "-" | "*" | "/" | "=";
	public MathElements getMathAccess() {
		return pMath;
	}
	
	public ParserRule getMathRule() {
		return getMathAccess().getRule();
	}
	
	//Variable:
	//	"not"? (INT | ID | Boolean | Math | SCHEME_ID | Function);
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Function:
	//	"'"? '(' SCHEME_ID Variable* ')';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
